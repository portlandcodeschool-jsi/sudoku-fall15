FEATURES:
Set instance @done
- new DigittSet instance @done
- new DigigitSet instance @done
DigitSare possible here @done
- digitSet.set(arrayOfDigits) @done
inal @done
- digitSet.add(digiify original @done
- digitSet.eliminate(digit) --> modify @done
- digitSet.eliminate(digitSet) @done
- digitSet.toString() --> string of digits in set @done
- digitSet.toArray() --> array of digits @done
- digitSet.isUncertain() --> boolean @done
- digitSet.contains(digit) --> boolean @done

Grid constructor:
- new Grid(initString) --> grid instance @done
- new Grid() --> grid instance @done

Grid instance methods:
- grid.cells() --> Array of all cell tokens
- grid.cells(groupToken) --> Array of cell tokens associated with groupToken
- grid.groups() --> Array of all group tokens
- grid.groups(cellToken) --> Array of all group tokens associated with cellToken
- grid.getRowNumber() --> array of groupTokens (all rows)=
- grid.getColNumber() --> array of groupTokens (all cols)
- grid.getBlock() --> array of groupTokens (all blocks)
- grid.getRowNumber(cellToken) --> groupToken (row)
- grid.getColNumber(cellToken) --> groupToken (col)
- grid.getBlock(cellToken) --> groupToken (block)
- grid.getPossible(cellToken) --> digitSet
- grid.setPossible(cellToken, digitSet) --> ?
- grid.neighborhood(cellToken) --> digitSet of all known digits in same row, col, or block OR --> array of digitSets for all neighbors
- grid.fromString(initString) --> set up grid with known digits
- grid.toString() --> initString
- grid.save() --> savedState @done
- grid.restore(savedState) @done
- grid.isInvalid() --> return true if notices any problems, else false?
- grid.remaining() --> number (0-81) of uncertain cells @done

Viewer constructor:
- new Viewer(grid) --> viewer instance
- Viewer instance methods:
- viewer.showCertain() --> string depicting 9x9 grid of digits known with certainty /* use own game with game.toString(), then squrify that string */
- `viewer.updateView() --> decorate finished group?
- viewer.showPossible() --> richer display including partial info
- viewer.showDebug()
- viewer.showHint(cellToken) --> show number of possibilities at some cell
- viewer.snapshot() --> store snapshot /* call grid.toString(), store that */
- viewer.playback() --> replay all shapshots /* call series of viewer.showCertain() for each stored snapshot? */
- viewer.startTimer() viewer.checkTime()

solver methods:
- solver.deduce(cellToken) --> new DigitSet ??
- solver.logProgress()



TESTS:
	
DigitSet constructor:
- new DigitSet() --> digitSet instance
- new DigitSet(digitArray) --> digitSet instance
- new DigitSet(singleDigit) --> digitSet instance
DigitSet instance methods:
- digitSet.size() --> integer 0-9; how many digits are possible here
- digitSet.set(arrayOfDigits)
- digitSet.add(digit) --> undefined, modify original
- digitSet.add(digitSet) --> undefined, modify original
- digitSet.eliminate(digit) --> modify
- digitSet.eliminate(digitSet)
- digitSet.toString() --> string of digits in set
- digitSet.toArray() --> array of digits
- digitSet.isUncertain() --> boolean
- digitSet.contains(digit) --> boolean

Grid constructor:
- new Grid(initString) --> grid instance
- new Grid() --> grid instance

Grid instance methods:
- grid.cells() --> Array of all cell tokens
- grid.cells(groupToken) --> Array of cell tokens associated with groupToken
- grid.groups() --> Array of all group tokens
- grid.groups(cellToken) --> Array of all group tokens associated with cellToken
- grid.getRowNumber() --> array of groupTokens (all rows)=
- grid.getColNumber() --> array of groupTokens (all cols)
- grid.getBlock() --> array of groupTokens (all blocks)
- grid.getRowNumber(cellToken) --> groupToken (row)
- grid.getColNumber(cellToken) --> groupToken (col)
- grid.getBlock(cellToken) --> groupToken (block)
- grid.getPossible(cellToken) --> digitSet
- grid.setPossible(cellToken, digitSet) --> ?
- grid.neighborhood(cellToken) --> digitSet of all known digits in same row, col, or block OR --> array of digitSets for all neighbors
- grid.fromString(initString) --> set up grid with known digits
- grid.toString() --> initString
- grid.save() --> savedState
- grid.restore(savedState)
- grid.isInvalid() --> return true if notices any problems, else false?
- grid.remaining() --> number (0-81) of uncertain cells

Viewer constructor:
- new Viewer(grid) --> viewer instance
- Viewer instance methods:
- viewer.showCertain() --> string depicting 9x9 grid of digits known with certainty /* use own game with game.toString(), then squrify that string */
- `viewer.updateView() --> decorate finished group?
- viewer.showPossible() --> richer display including partial info
- viewer.showDebug()
- viewer.showHint(cellToken) --> show number of possibilities at some cell
- viewer.snapshot() --> store snapshot /* call grid.toString(), store that */
- viewer.playback() --> replay all shapshots /* call series of viewer.showCertain() for each stored snapshot? */
- viewer.startTimer() viewer.checkTime()

solver methods:
- solver.deduce(cellToken) --> new DigitSet ??
- solver.logProgress()


